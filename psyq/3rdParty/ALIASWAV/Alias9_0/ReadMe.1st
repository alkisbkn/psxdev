

This archive contains the Playstation translator for use with Alias V9.0

The documentation for the Playstation translator is included with the V9.0
release of Alias.  See the Alias V9.0 Games Data Transfer book.

Added features and documentation from when the printed documentation was 
finished are found in this file.


Contents:

ReadMe.1st       this file
SO               compressed tar file with the actual translator and source
mgame.addin      new version of mgame plugin for running the translator

		

Notes:
------

1) Source code for the translator and sample viewer programs are included
   with the translator.  So it is possible to modify and customize the 
   translator for specific needs.

2) Geometry output in HMD format is included in this version.  This includes 
   the basic primitives at this point.  Other portions of HMD support 
   are planned for future releases.

3) The RSD files as generated by this version of the translator are the same as
   for previous versions.

Running the Sony utility "rsdlink" on the RSD files will not generate the same
TMD file that the translator outputs directly.

The output paths have been considered separate, and no attempt was made to 
ensure that they would match.  This is being looked into for a future version
of the translator.


3) The TOD file output for the TRS components will work with the Sony supplied
   TOD demo viewer.




The file SO is a compressed tar file that the "InstallGame" script will 
decompress and install into the Alias tree.

Assuming that the SO file is copied into the users HOME directory, and that
Alias has been installed normally such that there is a symbolic link from
/usr/aw/alias, would use the following command to install the files.


1) become root

su
(enter password if needed)


2) ensure that ALIAS_LOCATION is setup. 

setenv ALIAS_LOCATION /usr/aw/alias


3) run the "InstallGame" script

/usr/aw/alias/ODS/Games/bin/InstallGame -e -f $HOME -s SO


The SO file should then be uncompressed and untar'd into the default
Alias location tree for use with the mgame plugin.

See the Alias V9.0 Games Data Transfer book for additional installation notes.




Notes:


The following is a listing of the environment variables that I use to run the
translator, for output and testing.

DT_DOWNLOAD_DIR=/usr/tmp/GET/download
DT_EXPORT_DIR=/usr/tmp/GET/export
DT_PLUGIN_LOCATION=/name/games/trial/Dtplugins
DT_PSX_BEGSCRIPT=/name/games/trial/bin/psx_begscript
DT_PSX_ENDSCRIPT=/name/games/trial/bin/psx_endscript
DT_PSX_H1500_LOADER=/name/games/trial/bin/PSXloader

These allow the translator to automatically download to a H1500 development
system easily.  It is expected that the user would custom configure these
variables and script files for their own specific needs.

The DT_PLUGIN_LOCATION is not needed for the general user.  The Dt plugin
GetPlaystation will be found in the normal search path, usually, $ALIAS_LOCATION/ODS/Games/Dtplugins.  By setting DT_PLUGIN_LOCATION, it is possible to 
override the search order and look in the path specified first.

There are sample scripts in the $ALIAS_LOCATION/ODS/Games/bin directory for the
begin/end scripts.  These can be customized for specific uses.  

The sample end script checks for specific environment variables to see if the
development system is a H1500 (ethernet link) or serial link DTL-3050 serial 
cable, or a PC based DTL-2000 type series.  For the PC type development systems
the output files are placed into a "download" directory that is accessiable 
from the PC.  Most of my work has been with samba for PC<->unix transfers


 

Additions from printed Alias 9.0 documentation.
-----------------------------------------------


Mgame settings for Playstation:
-------------------------------

For playstation Texture settings in mgame, should normally be:

sample texture ON
inline texture ON

(The inline setting may have been defaulted differently before).


sample texture ON, means that the Alias shaded is evaluated and will show the
results "repeats, offsets..."

inline texture ON, means that the Alias shaded is evaluated.  Off means that
for file textures, the file is read in directly.



HMD support:
-----------

HMD file output is included in an initial format.  The translator will output
LAB formated files, that can be run thru the C PreProcessor to generate the
binary HMD file to download.  The sample psx_endscript does this for output
of the HMD format.

On the options page the output type of HMD is not used.  LAB file is always
output, and then the binary file is generated from it.

Currently only the geometry is output.

Some of the primitives that can be output include:

tiled textures, if the uv values are out of the 0-1 range.
prelit colours
textured
flat/smooth shading
tris/quad/n-sided as tris

Combinations of the above are also possible.

Important:

In order to output the TIM files for HMD, at the moment it is necessary to also
toggle ON the output TMD.


tiled textures:

In order to output the HMD TiledTexture flag, need to turn the "tile" option to
not Tiled.  May be backwards, but with this flag on the uv and texture is 
rescaled to "fit" into the proper 0-1 range.  This is the normal old method
used for the TMD output.  With HMD this still works, but can now leave this
off and output Tiled Textures with HMD, if the uv values are outside the 0-1
range.  Note that HMD requires that tiled textures be placed properly in the
VRAM for alignment purposes.



VMapper:
--------

Additional controls on the VMapper page are listed and output thru the HMD 
format.


The VRM file format changed slightly by adding in the ABR flag.

There is now a "version line" in the VRM file.
i.e:

#V2 This is version number of the VRM file

This is treated as one of the top level comments, but it also sets a local flag
to know what version of the file to load in.  If you parse the VRM file, then 
you should be aware of this.


Options:
--------

Can now specify the VMapper info file (.vrm) to use on the options page without
having to enter the VMapper window.

Many of the options will now "stick" and be the default the next time the 
translator is run.


BlindData:
----------

There are checks in the translator that checks for blind data attached to 
polysets/polygons to add specific HMD options to the output file.

The code can be customized to use user specific blind data tagging plugins.

I've included a sample data file that can be used with the plug-in "blade"
"blade" is a plug-in which allows the user to define a page of attributes that
can be attached as blind data to objects or components i.e. faces, vertices.

placing the following files into a directory 

$HOME/tables

will enable the plugin to see the definition.  The definition is an ascii file.

maindesc.ated
psx.ated

The maindesc.ated file is:

#
# Main Project Descriptor File for Attribute Editor
#
#
#SearchRange : 6500 - 10000
"PlayStation"  "tables/psx.ated"



The psx.ated file is:

[PSX HMD Parameters]  6599  Object,Polygon
  "SubDivision"     Div   L   # subdivision flag
  "Active SubDiv"     Adv   L   # Active sub-division
  "Fog"         Fog   L   # Fog flag
  "Light Source"      Lgt   L   # Light source calculation
  "Single Sided"      Bot   L   # single sided polygon flag
  "Semi-transparent"    Stp   L   # semi transparent flag
  "Clipping"        Clp   L   # clipping flag
  "has Normals flag"    Lmd   L   # has normals flag
  "Mip Mapping"     Mip   L   # mip mapping
  "Preset packet"     Pst   L   # preset packet available flag
  "MIMe"          MIMe  L   # Mime type flag

  "Stp Mixing rate"   ABR   B   # Semi-Transparency Mixing rate
  {
    " 50%back+ 50%Poly" 0 
    "100%back+100%Poly" 1 
    "100%back-100%Poly" 2 
    "100%back+ 25%Poly" 3 
  }

  "Instance Enable"   ParF  L   # Flag to say if Instance enabled
  "Instance Parent"   ParN  S[128]  # Parent Name (for Instancings)



Sample Viewer Programs:
-----------------------

There is a new sample viewer program PSXhmdViewer.

This viewer is based on the Sony HMD sample tuto0.  It was extended to add
additional viewer controls to allow the user to walk thru the generated scene.

Other than that it is the same.


The compiled version is for the H1500.  Would need to recompile it for the
DTL-2xxx series development systems.



The PSXhmdViewer defaults to camera mode, to switch back to view mode hold down
left hand buttons 1 & 2 and then at same time hold down right hand 1.  The 
display should change to show the current viewing mode.

The main difference between "view" and "camera" mode is what parameter is 
being modified by the user.  In camera mode, the x/y/z parameters are rescaled
based on the direction of the view point.  Makes it easier to walk around and
see things.


Controls:

Left hand buttons 1 & 2 down:

    Select button toggles thru the selections to be made
        Camera/view mode
        debug - info on screen

        mode
          Right hand button 1, go to view mode,
          Right hand button 2, go to camera mode.

        debug
          Right hand button 1, debug off
          Right hand button 2, debug on

Left hand button 1 down:

    Select button toggles thru the selections to be made
        For the following RHB 1 decreases, RHB 2 increase 

        rotate rate
        translate rate
        zoom rate
        ambient level


Left hand button 2 down, 

   RHB 1 decreases the coordinate system to use
   RHB 2 increases the coordinate system to use


Select and Start button down 

   Reset to initial viewing parameters.


View mode:

Left Hand Left/Right  - moves left/right on the screen
Left Hand Up/Down     - moves up/down on the screen

Right Hand 1/2        - moves in/out of screen (zoom)
Right Hand Left/Right - rotates clock/anticlock wise around 
Right Hand Up/Down    - rotates in/out of screen


Camera mode:

Left Hand Left/Right  - moves left/right relate to view angle
Left Hand Up/Down     - moves in/out relative to view angle

Right Hand 1/2        - moves up/down on screen  (Y)
Right Hand Left/Right - moves view angle left/right on screen
Right Hand Up/Down    - moves view angle up/down on screen

 

