BUILDING & DEPLOYING
--------------------

The BuildTool is the way to build a project and deploy it to one of the supported targets (either a real PSX through LPT, or on NO$PSX emulator).
When running the BuildTool, it will enumerate all directories under PSXDEV_PATH/projects. Each directory will be expected to be a valid project, which will include
at least a game_scu.c file (refer to the sandbox as an example).

Building is quite straightforward; there are 6 build configurations:
- Debug PSX
- Debug EMU
- Release PSX
- Release EMU
- Profile PSX
- Profile EMU
- Final PSX
- Final EMU

Preprocessor definitions:
-------------------------
- Debug builds have CONFIG_DEBUG defined.
- Release builds have CONFIG_RELEASE defined.
- Profile builds have CONFIG_PROFILE defined.
- Final builds have CONFIG_FINAL defined.
- EMU builds have TARGET_EMU defined.
- PSX builds have TARGET_PSX defined.

Use those to strip out unwanted codepaths. For instance, the engine's debug panel is not available in Final builds.

NOTE: The [EMU] ones also *require* that a CD image is built, so that it can be deployed to the NO$PSX emulator. This is also done automatically, patching the template
cd.xml in PSXDEV_PATH/cdrom with the specified license and selected project name.

Additional options to the CCPSX compiler can be specified in the fields following the "Build Target" group. Preprocessor, linker options, library & include directories
can be specified, separated by ';'.
Those settings will be saved per-project, per-config. The next time the BuildTool is launched, it'll update its values accordingly.

Built binaries are outputted in PSXDEV_PATH/projects/PROJECT_NAME/bin/BUILD_CONFIG
The "Run" functionality will expect a valid main.exe in the output build directory for the selected configuration. If there is no main.exe found (and also no CD image
in the case of an EMU build), then "Run" and "Clean" will be disabled.

The BuildTool is also used to prepare resources for use by the engine. At the moment there are the following resource compilers:

    - ModelCompiler: Converts .obj files to .psm model format. This is a format that's understood by the engine and has the full set of data to render models in one of the 4 vertex formats supported by the PSX GPU.
    - MaterialCompiler: Converts the PROJECT/data_source/Materials.xml (if available) to the custom MATLIB.MAT file. This is a master material description which contains both the unique material descriptions as well as the material -> submesh links.

A resource build is triggered using the Res Build button in the main BuildTool window.

Killing a process is also supported. Typically helpful on a real PSX hardware, but also useful when running on NO$PSX. It finds processes with either NO$PSX or Catflap name
and kills them. In the case of a PSX configuration, it will also reboot the PSX using Catflap before killing all Catflap processes.


DEPLOYING ON REAL PSX HARDWARE
------------------------------

Prior to using the BuildTool, there is some preparation work to be done, if this is the first time you are deploying to PSX.
To deploy on a real PSX you will need the following:

1) A Windows 7 (x86 or x64) as a development system (Windows 10 sadly does not work at the moment).
2) An LPT1 port on your motherboard; this can be a Pci-e expansion card or a LPT slot on the motherboard itself. USB to LPT does not work.
3) A PSX with a Parallel port (only the early models have this).
4) An XplorerFX cartridge. No other cheat cartridge will work. This also needs to be flashed to Caetla 0.34.
5) Catflap program & inpout32 driver, used to communicate with the PSX through the parallel port (This is already included in the psyq\bin directory, no need to do anything).

Instructions on how to flash XplorerFX: https://github.com/simias/rustation/wiki/Xplorer-FX-setup
You can also find the same instructions in the "Xplorer FX setup.pdf". All credit for this goes to Adam Becker.

Once all this is setup, you can run the project by using the BuildTool's Build and Run functionality.
